<?php
// $Id$

/**
 * @file
 * A simple +1 voting widget.
 */

/**
 * Implements hook_permission().
 */
function plusone_permission() {

  $perms = array(
    'rate content' => array(
      'title' => t('rate content'),
    ),
  );
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function plusone_menu() {

  $items['plusone/vote'] = array(
    'title' => 'Vote',
    'page callback' => 'plusone_vote',
    'access arguments' => array('rate content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  
  return $items;
}


/**
 * Called by jQuery, or by browser if JavaScript is disabled.
 * Submits the vote request. If called by jQuery, returns JSON.
 * If called by the browser, returns page with updated vote total.
 */
function plusone_vote() {

  global $user;
  $nid = (int)$nid;
  
  // Authors may not vote on their own posts. We check the node table
  // to see if this user is the author of the post.
  $is_author = db_query('SELECT uid from {node} where nid = :nid AND uid = :uid', array(":nid" => (int)$nid, ":uid" => (int)$user->uid))->fetchField();
  
  if ($nid > 0 && !$is_author) { 
    // get current vote count for this user;
    $vote_count = plusone_get_vote($nid, $user->uid);
    echo "Vote count is: $vote_count<br/>";
    if (!$vote_count) { 
      echo "Yep was existing votes<br/>";
      // Delete existing vote count for this user.
      db_delete('plusone_votes')
       ->condition('uid', $user->uid)
       ->condition('nid', $nid)
       ->execute();
      db_insert('plusone_votes')
        ->fields(array(
          'uid' => $user->uid,
          'nid' => $nid,
          'vote_count' => $vote_count + 1,
        ))
        ->execute();
      watchdog("plusone", 'Vote by @user on node @nid.', array('@user' => $user->name, '@nid' => $nid));
    }  
  } 
  $total_votes = plusone_get_total($nid);
  // Check to see if jQuery made the call.  The AJAX call used
  // the POST method and passed in the key/value pair js = 1.
  if (!empty($_POST['js'])) { 
    // jQuery made the call
    // This will return results to jQuery's request
    drupal_json(array(
     'total_votes' => $total_votes,
     'voted' => t('You Voted')
    )
   );
   exit();
  }
  
  // It was a non-JavaScript call. Redisplay the entire page
  // with the updated vote total by redirecting to node/$nid
  // (or any URL alias that has been set for node/$nid).
  $path = drupal_get_path_alias('node/'. $nid);
  drupal_goto($path);

}

/**
 * Return the number of votes for a given node ID/user ID pair
 */
function plusone_get_vote($nid, $uid) { 
   $vote_count = db_query('SELECT vote_count FROM {plusone_votes} WHERE
        nid = :nid AND uid = :uid', array(':nid' => $nid, ':uid' => $uid))->fetchField();
   return $vote_count;
}


/**
 * Return the total vote cont for a node.
 */
 function plusone_get_total($nid) { 
    $total_count = (int)db_query('SELECT SUM(vote_count) from {plusone_votes} where nid = :nid', array(':nid' => $nid))->fetchField();
    return ($total_count);
 }
 
/**
 * Load the values required to make the widget work
 * And output the widget on hook_node_load
 */ 
function plusone_node_view($node, $view_mode) {

  global $user;
  
  $total = plusone_get_total($node->nid);  
  $is_author = db_query('SELECT uid from {node} where nid = :nid AND uid = :uid', array(":nid" => $node->nid, ":uid" => $user->uid))->fetchField();  

  if ($is_author) { 
    $is_author = TRUE;
  } else { 
    $is_author = FALSE;
  }

  $voted = plusone_get_vote($node->nid, $user->uid);

  if ($view_mode == 'full') {
      $node->content['plusone_vote'] = array(
        '#markup' => theme('plusone_widget', array('nid' =>(int)$node->nid, 'total' =>(int)$total, 'is_author' => $is_author, 'voted' => $voted)),
        '#markup' => "Test",
        '#weight' => 100,
      );      
  }   
}


 
